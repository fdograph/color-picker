{"version":3,"sources":["components/Samples/ColorSwatch.tsx","components/ColorPicker/index.tsx","components/Samples/Combination.tsx","hooks/useSchemes.ts","components/Samples/index.tsx","App/index.tsx","index.tsx"],"names":["Swatch","styled","button","Text","p","Helper","ColorSwatch","color","className","alwaysVisible","useState","isCopied","setIsCopied","helperText","useEffect","setTimeout","text","value","onCopy","classNames","isDark","style","backgroundColor","PickerBox","div","Title","h1","MainSwatch","ColorPicker","setColor","c","toRgbString","isDarkClass","onChange","ci","tinycolor","rgb","setAlpha","alpha","theme","themes","dark","Wrapper","Combination","comb","map","i","processCombination","clone","scheme","baseAlpha","darken","darkSet","lighten","lightSet","schemize","com","filter","v","useSchemes","useMemo","baseColor","getAlpha","mono","triad","tetrad","analogous","splitComplement","splitcomplement","generateSchemes","Samples","combinations","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ee0f3e3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Color } from '../../hooks/types';\n\nconst Swatch = styled.button`\n  -webkit-appareance: none;\n  appareance: none;\n  border: none;\n  margin: 0;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  cursor: pointer;\n  padding: 0 14px;\n  min-height: 8em;\n  box-shadow: 0 0 0 rgba(0, 0, 0, 1);\n  transition: all 150ms ease;\n  min-width: 110px;\n\n  &::before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    outline-offset: -1px;\n  }\n\n  &:focus {\n    outline: 1px dashed #333;\n    outline-offset: -2px;\n\n    &::before {\n      outline: 1px dashed #ededed;\n    }\n  }\n\n  color: #333;\n  &.isDark {\n    color: #ededed;\n\n    &:focus {\n      outline-color: #ededed;\n\n      &::before {\n        outline: 1px dashed #333;\n      }\n    }\n  }\n\n  &:hover,\n  &:focus {\n    z-index: 2;\n    box-shadow: 0 0 16px rgba(0, 0, 0, 0.3);\n  }\n\n  .helper-text {\n    opacity: 0;\n    height: 0;\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n    transition: all 150ms ease;\n  }\n\n  &:hover .helper-text,\n  &:focus .helper-text,\n  &.alwaysVisible .helper-text {\n    opacity: 1;\n    height: 1.8em;\n  }\n\n  @media (pointer: coarse) {\n    .helper-text {\n      opacity: 1;\n      height: 1.8em;\n    }\n  }\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 12px;\n  font-weight: 500;\n`;\n\nconst Helper = styled.p`\n  margin: 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 10px;\n`;\n\nconst ColorSwatch: React.FC<{\n  color: Color;\n  className?: string;\n  alwaysVisible?: boolean;\n}> = ({ color, className, alwaysVisible }) => {\n  const [isCopied, setIsCopied] = useState<boolean>(false);\n  const helperText = isCopied ? 'Copied!' : 'Tap to copy';\n\n  useEffect(() => {\n    if (isCopied) {\n      setTimeout(() => setIsCopied(false), 3000);\n    }\n  }, [isCopied]);\n\n  return (\n    <CopyToClipboard text={color.value} onCopy={() => setIsCopied(true)}>\n      <Swatch\n        className={classNames(\n          {\n            isDark: color.isDark,\n            alwaysVisible: !!alwaysVisible,\n          },\n          className\n        )}\n        style={{ backgroundColor: color.value }}\n      >\n        <Text>{color.value}</Text>\n        <Helper className=\"helper-text\">{helperText}</Helper>\n      </Swatch>\n    </CopyToClipboard>\n  );\n};\n\nexport default ColorSwatch;\n","import React from 'react';\nimport Picker, { ColorObject, themes } from 'react-pick-color';\nimport styled from 'styled-components';\nimport tinycolor, { Instance as ColorInstance } from 'tinycolor2';\nimport classNames from 'classnames';\nimport ColorSwatch from '../Samples/ColorSwatch';\nimport { Color } from '../../hooks/types';\n\nconst PickerBox = styled.div`\n  padding: 15px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  z-index: 1;\n  box-shadow: 0 0 3em rgba(0, 0, 0, 0.2);\n\n  color: #222;\n  &.isDark {\n    color: #ededed;\n  }\n\n  .picker-component,\n  .picker-component * {\n    box-sizing: unset;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 1em 0 1em 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 42px;\n  font-weight: bolder;\n`;\n\nconst MainSwatch = styled(ColorSwatch)`\n  margin: 1em 0 0 0;\n  min-width: auto;\n  flex: 1;\n  width: 100%;\n  padding: 20px;\n  max-height: 6em;\n\n  border-width: 1px;\n  border-radius: 3px;\n  border-style: solid;\n  border-color: #222;\n\n  &.isDark {\n    border-color: #ededed;\n  }\n`;\n\ninterface ColorPickerProps {\n  color: ColorInstance;\n  setColor: (c: ColorInstance) => void;\n}\nconst ColorPicker: React.FC<ColorPickerProps> = ({ color, setColor }) => {\n  const updateColor = (color: ColorObject) => {\n    const ci = tinycolor(color.rgb);\n    ci.setAlpha(color.alpha);\n    setColor(ci);\n  };\n\n  const c: Color = {\n    value: color.toRgbString(),\n    isDark: color.isDark(),\n  };\n  const isDarkClass = classNames({ isDark: c.isDark });\n\n  return (\n    <PickerBox style={{ backgroundColor: c.value }} className={isDarkClass}>\n      <Title>\n        Pick a color!\n        <br />\n        Any color!\n      </Title>\n      <Picker\n        color={c.value}\n        onChange={updateColor}\n        theme={themes.dark}\n        className=\"picker-component\"\n      />\n      <MainSwatch color={c} className={isDarkClass} alwaysVisible />\n    </PickerBox>\n  );\n};\n\nexport default ColorPicker;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ColorSwatch from './ColorSwatch';\nimport { Color } from '../../hooks/types';\n\ninterface CombinationProps {\n  comb: Color[];\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst Combination: React.FC<CombinationProps> = ({ comb }) => {\n  return (\n    <Wrapper>\n      {comb.map((c, i) => (\n        <ColorSwatch key={`${i}-${c}`} color={c} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default Combination;\n","import { useMemo } from 'react';\nimport tinycolor, { Instance as ColorInstance } from 'tinycolor2';\nimport { Color } from './types';\n\nconst processCombination = (comb: ColorInstance[], alpha: number): Color[] => {\n  return comb.map((ci) => ({\n    value: ci.clone().setAlpha(alpha).toRgbString(),\n    isDark: ci.isDark(),\n  }));\n};\n\nconst darkSet = (color: ColorInstance, baseAlpha: number): Color[] => {\n  return processCombination(\n    [\n      color.clone().darken(25),\n      color.clone().darken(20),\n      color.clone().darken(10),\n    ],\n    baseAlpha\n  );\n};\n\nconst lightSet = (color: ColorInstance, baseAlpha: number): Color[] => {\n  return processCombination(\n    [\n      color.clone().lighten(10),\n      color.clone().lighten(20),\n      color.clone().lighten(25),\n    ],\n    baseAlpha\n  );\n};\n\nconst scheme = (color: ColorInstance, baseAlpha: number): Color[] => [\n  ...darkSet(color, baseAlpha),\n  ...lightSet(color, baseAlpha),\n];\n\nconst schemize = (com: ColorInstance[], baseAlpha: number): Color[][] => {\n  return com.filter((v, i) => !!i).map((c) => scheme(c, baseAlpha));\n};\n\nconst generateSchemes = (color: ColorInstance) => {\n  const baseColor = tinycolor(color);\n  const alpha = baseColor.getAlpha();\n\n  const mono = scheme(baseColor, alpha);\n  const triad = schemize(baseColor.triad(), alpha);\n  const tetrad = schemize(baseColor.tetrad(), alpha);\n  const analogous = schemize(baseColor.analogous(), alpha);\n  const splitComplement = schemize(baseColor.splitcomplement(), alpha);\n\n  return [mono, ...analogous, ...splitComplement, ...triad, ...tetrad];\n};\n\nconst useSchemes = (color: ColorInstance): Color[][] => {\n  return useMemo(() => generateSchemes(color), [color]);\n};\n\nexport default useSchemes;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Combination from './Combination';\nimport { Instance as ColorInstance } from 'tinycolor2';\nimport useSchemes from '../../hooks/useSchemes';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  min-width: 70%;\n`;\n\ninterface SamplesProps {\n  color: ColorInstance;\n}\n\nconst Samples: React.FC<SamplesProps> = ({ color }) => {\n  const combinations = useSchemes(color);\n\n  return (\n    <Wrapper>\n      {combinations.map((comb, i) => (\n        <Combination key={i} comb={comb} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default Samples;\n","import React, { useState } from 'react';\nimport ColorPicker from '../components/ColorPicker';\nimport styled from 'styled-components';\nimport Samples from '../components/Samples';\nimport tinycolor, { Instance as ColorInstance } from 'tinycolor2';\n\nconst Layout = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 100vh;\n  align-items: stretch;\n`;\n\nconst App: React.FC = () => {\n  const [color, setColor] = useState<ColorInstance>(\n    tinycolor('rgb(55, 0, 255)')\n  );\n  return (\n    <Layout>\n      <ColorPicker color={color} setColor={setColor} />\n      <Samples color={color} />\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}