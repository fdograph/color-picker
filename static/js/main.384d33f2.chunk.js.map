{"version":3,"sources":["components/Samples/ColorSwatch.tsx","components/ColorPicker/index.tsx","hooks/useCombinations.ts","components/Samples/Combination.tsx","components/Samples/index.tsx","App/index.tsx","index.tsx"],"names":["Swatch","styled","button","Text","p","Helper","ColorSwatch","color","className","alwaysVisible","useState","isCopied","setIsCopied","helperText","useEffect","setTimeout","text","value","onCopy","classNames","isDark","style","backgroundColor","PickerBox","div","Title","h1","MainSwatch","ColorPicker","setColor","colorInstance","tinycolor","c","toRgbString","isDarkClass","onChange","rgb","theme","themes","dark","processCombination","comb","alpha","shift","map","ci","setAlpha","useCombinations","useMemo","col","getAlpha","triad","analogous","tetrad","monochromatic","splitComplement","splitcomplement","getColorCombination","Wrapper","Combination","i","Samples","combinations","Object","values","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.384d33f2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Color } from '../../hooks/useCombinations';\n\nconst Swatch = styled.button`\n  -webkit-appareance: none;\n  appareance: none;\n  border: none;\n  margin: 0;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1 0 auto;\n  cursor: pointer;\n  padding: 0 14px;\n  min-width: 90px;\n  min-height: 6em;\n  box-shadow: 0 0 0 rgba(0, 0, 0, 1);\n  transition: all 150ms ease;\n\n  &::before {\n    content: '';\n    display: block;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    outline-offset: 1px;\n  }\n\n  &:focus {\n    outline: 1px dashed #333;\n\n    &::before {\n      outline: 1px dashed #ededed;\n    }\n  }\n\n  color: #333;\n  &.isDark {\n    color: #ededed;\n\n    &:focus {\n      outline-color: #ededed;\n\n      &::before {\n        outline: 1px dashed #333;\n      }\n    }\n  }\n\n  &:hover,\n  &:focus {\n    z-index: 2;\n    box-shadow: 0 0 16px rgba(0, 0, 0, 0.3);\n  }\n\n  .helper-text {\n    opacity: 0;\n    height: 0;\n    display: flex;\n    align-items: center;\n    overflow: hidden;\n    transition: all 150ms ease;\n  }\n\n  &:hover .helper-text,\n  &:focus .helper-text,\n  &.alwaysVisible .helper-text {\n    opacity: 1;\n    height: 1.8em;\n  }\n\n  @media (pointer: coarse) {\n    .helper-text {\n      opacity: 1;\n      height: 1.8em;\n    }\n  }\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst Helper = styled.p`\n  margin: 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 10px;\n`;\n\nconst ColorSwatch: React.FC<{\n  color: Color;\n  className?: string;\n  alwaysVisible?: boolean;\n}> = ({ color, className, alwaysVisible }) => {\n  const [isCopied, setIsCopied] = useState<boolean>(false);\n  const helperText = isCopied ? 'Copied!' : 'Tap to copy';\n\n  useEffect(() => {\n    if (isCopied) {\n      setTimeout(() => setIsCopied(false), 3000);\n    }\n  }, [isCopied]);\n\n  return (\n    <CopyToClipboard text={color.value} onCopy={() => setIsCopied(true)}>\n      <Swatch\n        className={classNames(\n          {\n            isDark: color.isDark,\n            alwaysVisible: !!alwaysVisible,\n          },\n          className\n        )}\n        style={{ backgroundColor: color.value }}\n      >\n        <Text>{color.value}</Text>\n        <Helper className=\"helper-text\">{helperText}</Helper>\n      </Swatch>\n    </CopyToClipboard>\n  );\n};\n\nexport default ColorSwatch;\n","import React from 'react';\nimport Picker, { themes } from 'react-pick-color';\nimport styled from 'styled-components';\nimport tinycolor, { ColorInput } from 'tinycolor2';\nimport classNames from 'classnames';\nimport ColorSwatch from '../Samples/ColorSwatch';\nimport { Color } from '../../hooks/useCombinations';\n\nconst PickerBox = styled.div`\n  padding: 15px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  z-index: 1;\n  box-shadow: 0 0 3em rgba(0, 0, 0, 0.2);\n\n  color: #222;\n  &.isDark {\n    color: #ededed;\n  }\n\n  .picker-component,\n  .picker-component * {\n    box-sizing: unset;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 1em 0 1em 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 42px;\n  font-weight: bolder;\n`;\n\nconst MainSwatch = styled(ColorSwatch)`\n  margin: 1em 0 0 0;\n  min-width: auto;\n  flex: 1;\n  width: 100%;\n  padding: 20px;\n  max-height: 6em;\n\n  border-width: 1px;\n  border-radius: 3px;\n  border-style: solid;\n  border-color: #222;\n\n  &.isDark {\n    border-color: #ededed;\n  }\n`;\n\ninterface ColorPickerProps {\n  color: ColorInput;\n  setColor: (c: ColorInput) => void;\n}\nconst ColorPicker: React.FC<ColorPickerProps> = ({ color, setColor }) => {\n  const colorInstance = tinycolor(color);\n  const c: Color = {\n    value: colorInstance.toRgbString(),\n    isDark: colorInstance.isDark(),\n  };\n\n  const isDarkClass = classNames({ isDark: c.isDark });\n\n  return (\n    <PickerBox style={{ backgroundColor: c.value }} className={isDarkClass}>\n      <Title>\n        Pick a color!\n        <br />\n        Any color!\n      </Title>\n      <Picker\n        color={c.value}\n        onChange={(color) => {\n          setColor(color.rgb);\n        }}\n        theme={themes.dark}\n        className=\"picker-component\"\n      />\n      <MainSwatch color={c} className={isDarkClass} alwaysVisible />\n    </PickerBox>\n  );\n};\n\nexport default ColorPicker;\n","import { useMemo } from 'react';\nimport tinycolor, { ColorInput, Instance as TCInstance } from 'tinycolor2';\n\nexport interface Color {\n  value: string;\n  isDark: boolean;\n}\n\nexport interface ColorCombs {\n  [s: string]: Color[];\n  analogous: Color[];\n  monochromatic: Color[];\n  splitComplement: Color[];\n  tetrad: Color[];\n  triad: Color[];\n}\n\nconst processCombination = (comb: TCInstance[], alpha: number): Color[] => {\n  comb.shift();\n  return comb.map((ci) => ({\n    value: ci.setAlpha(alpha).toRgbString(),\n    isDark: ci.isDark(),\n  }));\n};\n\nexport const getColorCombination = (c: ColorInput): ColorCombs => {\n  const col = tinycolor(c);\n  const alpha = col.getAlpha();\n  return {\n    triad: processCombination(col.triad(), alpha),\n    analogous: processCombination(col.analogous(), alpha),\n    tetrad: processCombination(col.tetrad(), alpha),\n    monochromatic: processCombination(col.monochromatic(), alpha),\n    splitComplement: processCombination(col.splitcomplement(), alpha),\n  };\n};\n\nconst useCombinations = (color: ColorInput): ColorCombs => {\n  return useMemo(() => getColorCombination(color), [color]);\n};\n\nexport default useCombinations;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ColorSwatch from './ColorSwatch';\nimport { Color } from '../../hooks/useCombinations';\n\ninterface CombinationProps {\n  comb: Color[];\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst Combination: React.FC<CombinationProps> = ({ comb }) => {\n  return (\n    <Wrapper>\n      {comb.map((c, i) => (\n        <ColorSwatch key={`${i}-${c}`} color={c} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default Combination;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useCombinations, { Color } from '../../hooks/useCombinations';\nimport Combination from './Combination';\nimport { ColorInput } from 'tinycolor2';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  min-width: 70%;\n`;\n\ninterface SamplesProps {\n  color: ColorInput;\n}\n\nconst Samples: React.FC<SamplesProps> = ({ color }) => {\n  const combinations = useCombinations(color);\n\n  return (\n    <Wrapper>\n      {Object.values<Color[]>(combinations).map((comb, i) => (\n        <Combination key={i} comb={comb} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default Samples;\n","import React, { useState } from 'react';\nimport ColorPicker from '../components/ColorPicker';\nimport styled from 'styled-components';\nimport Samples from '../components/Samples';\nimport { ColorInput } from 'tinycolor2';\n\nconst Layout = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 100vh;\n  align-items: stretch;\n`;\n\nconst App: React.FC = () => {\n  const [color, setColor] = useState<ColorInput>('rgb(255, 0, 90)');\n\n  return (\n    <Layout>\n      <ColorPicker color={color} setColor={setColor} />\n      <Samples color={color} />\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}