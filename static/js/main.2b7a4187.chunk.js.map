{"version":3,"sources":["components/ColorPicker/index.tsx","hooks/useCombinations.ts","components/Samples/ColorSwatch.tsx","components/Samples/Combination.tsx","components/Samples/index.tsx","App/index.tsx","index.tsx"],"names":["PickerBox","styled","div","Title","h1","ColorText","p","ColorPicker","color","setColor","colorInstance","tinycolor","colorString","toRgbString","isDark","style","backgroundColor","className","classNames","onChange","rgb","theme","themes","dark","processCombination","comb","alpha","shift","map","ci","value","setAlpha","useCombinations","useMemo","c","col","getAlpha","analogous","monochromatic","splitComplement","splitcomplement","tetrad","triad","getColorCombination","Swatch","Text","Helper","ColorSwatch","useState","isCopied","setIsCopied","helperText","text","onCopy","Wrapper","Combination","i","Samples","combinations","Object","values","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qSAMMA,EAAYC,IAAOC,IAAV,mRAgBTC,EAAQF,IAAOG,GAAV,sKAQLC,EAAYJ,IAAOK,EAAV,iKAuCAC,EA3BiC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAClDC,EAAgBC,IAAUH,GAC1BI,EAAcF,EAAcG,cAC5BC,EAASJ,EAAcI,SAE7B,OACE,eAACd,EAAD,CACEe,MAAO,CAAEC,gBAAiBJ,GAC1BK,UAAWC,IAAW,CAAEJ,WAF1B,UAIE,eAACX,EAAD,2BAEE,uBAFF,gBAKA,cAAC,IAAD,CACEK,MAAOI,EACPO,SAAU,SAACX,GACTC,EAASD,EAAMY,MAEjBC,MAAOC,IAAOC,OAEhB,cAAClB,EAAD,UAAYO,QC/CZY,EAAqB,SAACC,EAAoBC,GAE9C,OADAD,EAAKE,QACEF,EAAKG,KAAI,SAACC,GAAD,MAAS,CACvBC,MAAOD,EAAGE,SAASL,GAAOb,cAC1BC,OAAQe,EAAGf,cAoBAkB,EAJS,SAACxB,GACvB,OAAOyB,mBAAQ,kBAbkB,SAACC,GAClC,IAAMC,EAAMxB,IAAUuB,GAChBR,EAAQS,EAAIC,WAClB,MAAO,CACLC,UAAWb,EAAmBW,EAAIE,YAAaX,GAC/CY,cAAed,EAAmBW,EAAIG,gBAAiBZ,GACvDa,gBAAiBf,EAAmBW,EAAIK,kBAAmBd,GAC3De,OAAQjB,EAAmBW,EAAIM,SAAUf,GACzCgB,MAAOlB,EAAmBW,EAAIO,QAAShB,IAKpBiB,CAAoBnC,KAAQ,CAACA,K,QChC9CoC,EAAS3C,IAAOC,IAAV,ikBAkCN2C,EAAO5C,IAAOK,EAAV,yJAQJwC,EAAS7C,IAAOK,EAAV,oIAwBGyC,EAjBiC,SAAC,GAAe,IAAbvC,EAAY,EAAZA,MAAY,EAC7BwC,oBAAkB,GADW,mBACtDC,EADsD,KAC5CC,EAD4C,KAEvDC,EAAaF,EAAW,UAAY,mBAE1C,OACE,cAAC,kBAAD,CAAiBG,KAAM5C,EAAMsB,MAAOuB,OAAQ,kBAAMH,GAAY,IAA9D,SACE,eAACN,EAAD,CACE3B,UAAWC,IAAW,CAAEJ,OAAQN,EAAMM,SACtCC,MAAO,CAAEC,gBAAiBR,EAAMsB,OAFlC,UAIE,cAACe,EAAD,UAAOrC,EAAMsB,QACb,cAACgB,EAAD,CAAQ7B,UAAU,cAAlB,SAAiCkC,UCzDnCG,EAAUrD,IAAOC,IAAV,8EAgBEqD,EAViC,SAAC,GAAc,IAAZ9B,EAAW,EAAXA,KACjD,OACE,cAAC6B,EAAD,UACG7B,EAAKG,KAAI,SAACM,EAAGsB,GAAJ,OACR,cAAC,EAAD,CAA+BhD,MAAO0B,GAAtC,UAAqBsB,EAArB,YAA0BtB,UCb5BoB,EAAUrD,IAAOC,IAAV,2HAwBEuD,EAZyB,SAAC,GAAe,IAAbjD,EAAY,EAAZA,MACnCkD,EAAe1B,EAAgBxB,GAErC,OACE,cAAC,EAAD,UACGmD,OAAOC,OAAgBF,GAAc9B,KAAI,SAACH,EAAM+B,GAAP,OACxC,cAAC,EAAD,CAAqB/B,KAAMA,GAAT+B,SClBpBK,EAAS5D,IAAOC,IAAV,iHAkBG4D,EAXO,WAAO,IAAD,EACAd,mBAAqB,qBADrB,mBACnBxC,EADmB,KACZC,EADY,KAG1B,OACE,eAACoD,EAAD,WACE,cAAC,EAAD,CAAarD,MAAOA,EAAOC,SAAUA,IACrC,cAAC,EAAD,CAASD,MAAOA,QCbtBuD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2b7a4187.chunk.js","sourcesContent":["import React from 'react';\nimport Picker, { themes } from 'react-pick-color';\nimport styled from 'styled-components';\nimport tinycolor, { ColorInput } from 'tinycolor2';\nimport classNames from 'classnames';\n\nconst PickerBox = styled.div`\n  padding: 15px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  z-index: 1;\n  box-shadow: 0 0 3em rgba(0, 0, 0, 0.2);\n\n  color: #222;\n  &.isDark {\n    color: #ededed;\n  }\n`;\n\nconst Title = styled.h1`\n  margin: 1em 0 1em 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 42px;\n  font-weight: bolder;\n`;\n\nconst ColorText = styled.p`\n  margin: 1em 0 0 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 28px;\n  font-weight: 700;\n`;\n\ninterface ColorPickerProps {\n  color: ColorInput;\n  setColor: (c: ColorInput) => void;\n}\nconst ColorPicker: React.FC<ColorPickerProps> = ({ color, setColor }) => {\n  const colorInstance = tinycolor(color);\n  const colorString = colorInstance.toRgbString();\n  const isDark = colorInstance.isDark();\n\n  return (\n    <PickerBox\n      style={{ backgroundColor: colorString }}\n      className={classNames({ isDark })}\n    >\n      <Title>\n        Pick a color!\n        <br />\n        Any color!\n      </Title>\n      <Picker\n        color={colorString}\n        onChange={(color) => {\n          setColor(color.rgb);\n        }}\n        theme={themes.dark}\n      />\n      <ColorText>{colorString}</ColorText>\n    </PickerBox>\n  );\n};\n\nexport default ColorPicker;\n","import { useMemo } from 'react';\nimport tinycolor, { ColorInput, Instance as TCInstance } from 'tinycolor2';\n\nexport interface Color {\n  value: string;\n  isDark: boolean;\n}\n\nexport interface ColorCombs {\n  [s: string]: Color[];\n  analogous: Color[];\n  monochromatic: Color[];\n  splitComplement: Color[];\n  tetrad: Color[];\n  triad: Color[];\n}\n\nconst processCombination = (comb: TCInstance[], alpha: number): Color[] => {\n  comb.shift();\n  return comb.map((ci) => ({\n    value: ci.setAlpha(alpha).toRgbString(),\n    isDark: ci.isDark(),\n  }));\n};\n\nexport const getColorCombination = (c: ColorInput): ColorCombs => {\n  const col = tinycolor(c);\n  const alpha = col.getAlpha();\n  return {\n    analogous: processCombination(col.analogous(), alpha),\n    monochromatic: processCombination(col.monochromatic(), alpha),\n    splitComplement: processCombination(col.splitcomplement(), alpha),\n    tetrad: processCombination(col.tetrad(), alpha),\n    triad: processCombination(col.triad(), alpha),\n  };\n};\n\nconst useCombinations = (color: ColorInput): ColorCombs => {\n  return useMemo(() => getColorCombination(color), [color]);\n};\n\nexport default useCombinations;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport classNames from 'classnames';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport { Color } from '../../hooks/useCombinations';\n\nconst Swatch = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex: 1;\n  cursor: pointer;\n  padding: 15px;\n  //aspect-ratio: 1 / 1;\n  //height: 120px;\n  min-width: 90px;\n  box-shadow: 0 0 0 rgba(0, 0, 0, 1);\n  transition: all 150ms ease;\n\n  color: #333;\n  &.isDark {\n    color: #ededed;\n  }\n\n  &:hover {\n    z-index: 2;\n    box-shadow: 0 0 16px rgba(0, 0, 0, 0.3);\n  }\n\n  &:hover .helper-text {\n    opacity: 1;\n  }\n\n  .helper-text {\n    opacity: 0;\n    transition: all 150ms ease;\n  }\n`;\n\nconst Text = styled.p`\n  margin: 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst Helper = styled.p`\n  margin: 0;\n  text-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);\n  text-align: center;\n  font-size: 10px;\n`;\n\nconst ColorSwatch: React.FC<{ color: Color }> = ({ color }) => {\n  const [isCopied, setIsCopied] = useState<boolean>(false);\n  const helperText = isCopied ? 'Copied!' : 'Click to copy :)';\n\n  return (\n    <CopyToClipboard text={color.value} onCopy={() => setIsCopied(true)}>\n      <Swatch\n        className={classNames({ isDark: color.isDark })}\n        style={{ backgroundColor: color.value }}\n      >\n        <Text>{color.value}</Text>\n        <Helper className=\"helper-text\">{helperText}</Helper>\n      </Swatch>\n    </CopyToClipboard>\n  );\n};\n\nexport default ColorSwatch;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ColorSwatch from './ColorSwatch';\nimport { Color } from '../../hooks/useCombinations';\n\ninterface CombinationProps {\n  comb: Color[];\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex: 1;\n  flex-wrap: wrap;\n`;\n\nconst Combination: React.FC<CombinationProps> = ({ comb }) => {\n  return (\n    <Wrapper>\n      {comb.map((c, i) => (\n        <ColorSwatch key={`${i}-${c}`} color={c} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default Combination;\n","import React from 'react';\nimport styled from 'styled-components';\nimport useCombinations, { Color } from '../../hooks/useCombinations';\nimport Combination from './Combination';\nimport { ColorInput } from 'tinycolor2';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  //height: 100%;\n  min-width: 70%;\n`;\n\ninterface SamplesProps {\n  color: ColorInput;\n}\n\nconst Samples: React.FC<SamplesProps> = ({ color }) => {\n  const combinations = useCombinations(color);\n\n  return (\n    <Wrapper>\n      {Object.values<Color[]>(combinations).map((comb, i) => (\n        <Combination key={i} comb={comb} />\n      ))}\n    </Wrapper>\n  );\n};\n\nexport default Samples;\n","import React, { useState } from 'react';\nimport ColorPicker from '../components/ColorPicker';\nimport styled from 'styled-components';\nimport Samples from '../components/Samples';\nimport { ColorInput } from 'tinycolor2';\n\nconst Layout = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 100vh;\n  align-items: stretch;\n`;\n\nconst App: React.FC = () => {\n  const [color, setColor] = useState<ColorInput>('rgb(255, 70, 135)');\n\n  return (\n    <Layout>\n      <ColorPicker color={color} setColor={setColor} />\n      <Samples color={color} />\n    </Layout>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}